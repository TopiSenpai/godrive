package godrive

import (
	"archive/zip"
	"context"
	"encoding/json"
	"errors"
	"io"
	"log"
	"net/http"
	"path"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
)

type (
	TemplateVariables struct {
		Path      string
		PathParts []string
		Files     []TemplateFile
		Theme     string
	}

	TemplateFile struct {
		IsDir       bool
		Dir         string
		Name        string
		Size        uint64
		Description string
		Date        time.Time
	}

	FileRequest struct {
		Size        uint64 `json:"size"`
		Description string `json:"description"`
		Private     bool   `json:"private"`
	}

	FileResponse struct {
		Dir         string    `json:"dir"`
		Name        string    `json:"name"`
		Size        uint64    `json:"size"`
		ContentType string    `json:"content_type"`
		Description string    `json:"description"`
		Private     bool      `json:"private"`
		CreatedAt   time.Time `json:"created_at"`
		UpdatedAt   time.Time `json:"updated_at"`
	}

	ErrorResponse struct {
		Message   string `json:"message"`
		Status    int    `json:"status"`
		Path      string `json:"path"`
		RequestID string `json:"request_id"`
	}
)

func (f TemplateFile) FullName() string {
	return path.Join(f.Dir, f.Name)
}
func (s *Server) Routes() http.Handler {
	r := chi.NewRouter()
	r.Use(middleware.CleanPath)
	r.Use(middleware.RealIP)
	r.Use(middleware.RequestID)
	r.Use(middleware.Maybe(
		middleware.RequestLogger(&middleware.DefaultLogFormatter{
			Logger: log.Default(),
		}),
		func(r *http.Request) bool {
			// Don't log requests for assets
			return !strings.HasPrefix(r.URL.Path, "/assets")
		},
	))
	r.Use(middleware.Recoverer)
	r.Use(middleware.Heartbeat("/ping"))
	r.Use(s.JWTMiddleware)

	if s.cfg.Debug {
		r.Mount("/debug", middleware.Profiler())
	}

	r.Mount("/assets", http.FileServer(s.assets))
	r.Handle("/favicon.ico", s.file("/assets/favicon.png"))
	r.Handle("/favicon.png", s.file("/assets/favicon.png"))
	r.Handle("/favicon-light.png", s.file("/assets/favicon-light.png"))
	r.Handle("/robots.txt", s.file("/assets/robots.txt"))
	r.Group(func(r chi.Router) {
		r.Get("/version", s.GetVersion)
		r.Get("/*", s.GetFiles)
		r.Head("/*", s.GetFiles)
		r.Post("/*", s.PostFiles)
		r.Patch("/*", s.PatchFiles)
		r.Delete("/*", s.DeleteFiles)
	})
	r.NotFound(s.notFound)

	return r
}

func (s *Server) serveFiles(w http.ResponseWriter, r *http.Request, rPath string) {
	files, err := s.db.FindFiles(r.Context(), rPath)
	if err != nil {
		s.error(w, r, err, http.StatusInternalServerError)
		return
	}

	if len(files) == 0 {
		s.notFound(w, r)
		return
	}

	if len(files) == 1 {
		file := files[0]
		w.Header().Set("Content-Disposition", "attachment; filename="+file.Name)
		w.Header().Set("Content-Type", file.ContentType)
		w.Header().Set("Content-Length", strconv.FormatUint(file.Size, 10))
		if err = s.writeFile(r.Context(), w, path.Join(file.Dir, file.Name)); err != nil {
			s.error(w, r, err, http.StatusInternalServerError)
			return
		}
		return
	}

	zipName := path.Dir(rPath)
	if zipName == "/" || zipName == "." {
		zipName = "godrive"
	}
	w.Header().Set("Content-Disposition", "attachment; filename="+zipName+".zip")

	zw := zip.NewWriter(w)
	defer zw.Close()
	for _, file := range files {
		if file.Private {
			continue
		}
		fullName := path.Join(file.Dir, file.Name)
		var fw io.Writer
		fw, err = zw.CreateHeader(&zip.FileHeader{
			Name:               strings.TrimPrefix(fullName, "/"),
			UncompressedSize64: file.Size,
			Modified:           file.UpdatedAt,
			Comment:            file.Description,
			Method:             zip.Deflate,
		})
		if err != nil {
			s.error(w, r, err, http.StatusInternalServerError)
			return
		}
		if err = s.writeFile(r.Context(), fw, fullName); err != nil {
			s.error(w, r, err, http.StatusInternalServerError)
			return
		}
	}
	if err = zw.SetComment("Generated by godrive"); err != nil {
		s.error(w, r, err, http.StatusInternalServerError)
		return
	}
}

func (s *Server) writeFile(ctx context.Context, w io.Writer, fullName string) error {
	obj, err := s.storage.GetObject(ctx, fullName)
	if err != nil {
		return err
	}
	if _, err = io.Copy(w, obj); err != nil {
		return err
	}
	return nil
}

func (s *Server) GetVersion(w http.ResponseWriter, _ *http.Request) {
	_, _ = w.Write([]byte(s.version))
}

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	if err := s.tmpl(w, "404.gohtml", nil); err != nil {
		s.error(w, r, err, http.StatusInternalServerError)
	}
}

func (s *Server) log(r *http.Request, logType string, err error) {
	if errors.Is(err, context.DeadlineExceeded) {
		return
	}
	log.Printf("Error while handling %s(%s) %s: %s\n", logType, middleware.GetReqID(r.Context()), r.RequestURI, err)
}

func (s *Server) error(w http.ResponseWriter, r *http.Request, err error, status int) {
	if errors.Is(err, http.ErrHandlerTimeout) {
		return
	}
	if status == http.StatusInternalServerError {
		s.log(r, "request", err)
	}
	s.json(w, r, ErrorResponse{
		Message:   err.Error(),
		Status:    status,
		Path:      r.URL.Path,
		RequestID: middleware.GetReqID(r.Context()),
	}, status)
}

func (s *Server) ok(w http.ResponseWriter, r *http.Request, v any) {
	s.json(w, r, v, http.StatusOK)
}

func (s *Server) json(w http.ResponseWriter, r *http.Request, v any, status int) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)
	if r.Method == http.MethodHead {
		return
	}

	if err := json.NewEncoder(w).Encode(v); err != nil && err != http.ErrHandlerTimeout {
		s.log(r, "json", err)
	}
}

func (s *Server) file(path string) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		file, err := s.assets.Open(path)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		defer file.Close()
		_, _ = io.Copy(w, file)
	}
}
